package cmd

import (
	"fmt"
	"os"

	"github.com/ncr-devops-platform/nagiosfoundation/cmd/initcmd"
	"github.com/ncr-devops-platform/nagiosfoundation/lib/app/nagiosfoundation"
	"github.com/spf13/cobra"
)

// Execute runs the root command
func Execute() {
	var warning, critical int
	var processName, metricName string

	var rootCmd = &cobra.Command{
		Use:   "check_process_memory",
		Short: "Checks the memory usage of a process",
		Long: `Determines the percentage of memory used by a process.
On linux this value will match the value reported in 'top'.
On windows this value is calculated from WorkingSetSize field of a process.
Sum of WorkingSetSize for all processes should sum up to a total memory used as reported by task manager. Sum for a single process might not be equal to memory as reported on Processes tab.
If returned value is above --critical percentage, issue a CRITICAL response.
If above --warning percentage, issue WARNING response.
If below both, issue OK response.`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.ParseFlags(os.Args)
			msg, retval := nagiosfoundation.CheckProcessMemory(warning, critical, processName, metricName)

			fmt.Println(msg)
			os.Exit(retval)
		},
	}

	initcmd.AddVersionCommand(rootCmd)

	rootCmd.Flags().IntVarP(&warning, "warning", "w", 85, "The memory threshold to issue a warning alert")
	rootCmd.Flags().IntVarP(&critical, "critical", "c", 95, "The memory threshold to issue a critical alert")
	rootCmd.Flags().StringVarP(&metricName, "metric_name", "m", "memory_used_process_percentage", "The name of the metric generated by this check")
	rootCmd.Flags().StringVarP(&processName, "process_name", "n", "", "The name of the process to check memory consumption for")
	rootCmd.MarkFlagRequired("process_name")

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
