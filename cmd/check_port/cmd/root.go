package cmd

import (
	"fmt"
	"os"

	"github.com/ncr-devops-platform/nagiosfoundation/cmd/initcmd"
	nf "github.com/ncr-devops-platform/nagiosfoundation/lib/app/nagiosfoundation"
	"github.com/spf13/cobra"
)

const (
	addressFlag = "address"
	portFlag    = "port"
)

// Execute runs the root command
func Execute(apiCheckPort func(nf.CheckPortProtocol, string, int, int, bool, string) (string, int)) int {
	var machine, metricName string
	var port, timeout, exitCode int
	var invert bool

	var rootCmd = &cobra.Command{
		Use:   "check_port",
		Short: "Check for a listening port on a machine.",
		Long:  `Check for a listening port on a networked machine by attempting to connect to it.`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.ParseFlags(os.Args)
			msg, retval := apiCheckPort(nf.CheckPortProtocolTCP, machine, port, timeout, invert, metricName)

			fmt.Println(msg)
			exitCode = retval
		},
	}

	initcmd.AddVersionCommand(rootCmd)

	rootCmd.Flags().StringVarP(&machine, addressFlag, "a", "", "the address to check")
	rootCmd.MarkFlagRequired(addressFlag)
	rootCmd.Flags().IntVarP(&port, portFlag, "p", 0, "port number to check")
	rootCmd.MarkFlagRequired(portFlag)
	rootCmd.Flags().IntVarP(&timeout, "timeout", "t", 30, "timeout in seconds")
	rootCmd.Flags().BoolVarP(&invert, "invert", "i", false, "return OK on failure to connect")
	rootCmd.Flags().StringVarP(&metricName, "metric_name", "m", "listening_port", "the name of the metric generated by this check")

	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stdout, err)
		exitCode = 1
	}

	return exitCode
}
