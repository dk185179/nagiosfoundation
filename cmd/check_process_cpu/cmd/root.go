package cmd

import (
	"fmt"
	"os"

	"github.com/ncr-devops-platform/nagiosfoundation/cmd/initcmd"
	"github.com/ncr-devops-platform/nagiosfoundation/lib/app/nagiosfoundation"
	"github.com/spf13/cobra"
)

// Execute runs the root command
func Execute() {
	var warning, critical int
	var processName, metricName string
	var usePerCoreCalculation bool

	var rootCmd = &cobra.Command{
		Use:   "check_process_cpu",
		Short: "Checks the CPU usage of a process",
		Long: `Performs a CPU utilization check by getting the usage percentage of a process and its children.
Multiple samples are taken and final value is averaged.
If using --core flag, then average utilization will be calculated per-core and highest number will be returned (Linux only).
If returned value is above --critical percentage, issue a CRITICAL response.
If above --warning percentage, issue WARNING response.
If below both, issue OK response.`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.ParseFlags(os.Args)
			msg, retval := nagiosfoundation.CheckProcessCPU(warning, critical, processName, metricName, usePerCoreCalculation)

			fmt.Println(msg)
			os.Exit(retval)
		},
	}

	initcmd.AddVersionCommand(rootCmd)

	rootCmd.Flags().IntVarP(&warning, "warning", "w", 85, "The average highest CPU core threshold to issue a warning alert")
	rootCmd.Flags().IntVarP(&critical, "critical", "c", 95, "The average highest CPU core threshold to issue a critical alert")
	rootCmd.Flags().StringVarP(&metricName, "metric_name", "m", "process_cpu_percentage", "The name of the metric generated by this check")
	rootCmd.Flags().StringVarP(&processName, "process_name", "n", "", "The name of the process to check CPU for")
	rootCmd.MarkFlagRequired("process_name")
	rootCmd.Flags().BoolVar(&usePerCoreCalculation, "core", false, "Set to use per-core calculation")

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
